-- MySQL Script generated by MySQL Workbench
-- 03/15/16 21:55:48
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema garlic
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `garlic` ;

-- -----------------------------------------------------
-- Schema garlic
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `garlic` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `garlic` ;

-- -----------------------------------------------------
-- Table `garlic`.`u_users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`u_users` ;

CREATE TABLE IF NOT EXISTS `garlic`.`u_users` (
  `u_username` VARCHAR(20) NOT NULL COMMENT '',
  `u_password` VARCHAR(100) NOT NULL COMMENT '',
  `u_email` VARCHAR(50) NOT NULL COMMENT '',
  PRIMARY KEY (`u_username`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`p_posts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`p_posts` ;

CREATE TABLE IF NOT EXISTS `garlic`.`p_posts` (
  `p_id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `p_content` VARCHAR(10000) NOT NULL COMMENT '',
  `p_date` DATETIME NOT NULL COMMENT '',
  `p_u_username` VARCHAR(20) NOT NULL COMMENT '',
  PRIMARY KEY (`p_id`)  COMMENT '',
  INDEX `fk_p_posts_u_users_idx` (`p_u_username` ASC)  COMMENT '',
  CONSTRAINT `fk_p_posts_u_users`
    FOREIGN KEY (`p_u_username`)
    REFERENCES `garlic`.`u_users` (`u_username`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`r_rankings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`r_rankings` ;

CREATE TABLE IF NOT EXISTS `garlic`.`r_rankings` (
  `r_rank` INT NOT NULL COMMENT '',
  `r_context` VARCHAR(50) NOT NULL COMMENT '',
  PRIMARY KEY (`r_rank`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`c_clove`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`c_clove` ;

CREATE TABLE IF NOT EXISTS `garlic`.`c_clove` (
  `c_id` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `c_name` VARCHAR(50) NOT NULL COMMENT '',
  `c_access` TINYINT(1) NOT NULL COMMENT '',
  `c_description` VARCHAR(1000) NULL COMMENT '',
  PRIMARY KEY (`c_id`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`a_articles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`a_articles` ;

CREATE TABLE IF NOT EXISTS `garlic`.`a_articles` (
  `a_p_id` INT NOT NULL COMMENT '',
  `a_c_clove` INT NULL COMMENT '',
  `a_title` VARCHAR(200) NOT NULL COMMENT '',
  `a_r_rank` INT NULL COMMENT '',
  PRIMARY KEY (`a_p_id`)  COMMENT '',
  INDEX `fk_a_articles_r_rankings1_idx` (`a_r_rank` ASC)  COMMENT '',
  INDEX `fk_a_articles_c_clove1_idx` (`a_c_clove` ASC)  COMMENT '',
  CONSTRAINT `fk_a_articles_p_posts1`
    FOREIGN KEY (`a_p_id`)
    REFERENCES `garlic`.`p_posts` (`p_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_a_articles_r_rankings1`
    FOREIGN KEY (`a_r_rank`)
    REFERENCES `garlic`.`r_rankings` (`r_rank`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_a_articles_c_clove1`
    FOREIGN KEY (`a_c_clove`)
    REFERENCES `garlic`.`c_clove` (`c_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`c_comments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`c_comments` ;

CREATE TABLE IF NOT EXISTS `garlic`.`c_comments` (
  `c_p_id` INT NOT NULL COMMENT '',
  `c_p_commentOf` INT NOT NULL COMMENT '',
  PRIMARY KEY (`c_p_id`)  COMMENT '',
  INDEX `fk_c_comments_p_posts2_idx` (`c_p_commentOf` ASC)  COMMENT '',
  CONSTRAINT `fk_c_comments_p_posts1`
    FOREIGN KEY (`c_p_id`)
    REFERENCES `garlic`.`p_posts` (`p_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_c_comments_p_posts2`
    FOREIGN KEY (`c_p_commentOf`)
    REFERENCES `garlic`.`p_posts` (`p_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`sm_socialmedias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`sm_socialmedias` ;

CREATE TABLE IF NOT EXISTS `garlic`.`sm_socialmedias` (
  `sm_name` VARCHAR(20) NOT NULL COMMENT '',
  PRIMARY KEY (`sm_name`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`v_votes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`v_votes` ;

CREATE TABLE IF NOT EXISTS `garlic`.`v_votes` (
  `v_p_post` INT NOT NULL COMMENT '',                                        
  `v_upvote` TINYINT(1) NOT NULL COMMENT '',
  `v_date` DATETIME NOT NULL COMMENT '',
  PRIMARY KEY (`v_date`, `v_p_post`)  COMMENT '',
  INDEX `fk_v_votes_p_posts1_idx` (`v_p_post` ASC)  COMMENT '',
  CONSTRAINT `fk_v_votes_p_posts1`
    FOREIGN KEY (`v_p_post`)
    REFERENCES `garlic`.`p_posts` (`p_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`csm_connectedsocialmedias`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`csm_connectedsocialmedias` ;

CREATE TABLE IF NOT EXISTS `garlic`.`csm_connectedsocialmedias` (
  `csm_sm_name` VARCHAR(20) NOT NULL COMMENT '',
  `csm_u_username` VARCHAR(20) NOT NULL COMMENT '',
  `csm_password` VARCHAR(100) NOT NULL COMMENT '',
  PRIMARY KEY (`csm_sm_name`, `csm_u_username`)  COMMENT '',
  INDEX `fk_sm_socialmedias_has_u_users_u_users1_idx` (`csm_u_username` ASC)  COMMENT '',
  INDEX `fk_sm_socialmedias_has_u_users_sm_socialmedias1_idx` (`csm_sm_name` ASC)  COMMENT '',
  CONSTRAINT `fk_sm_socialmedias_has_u_users_sm_socialmedias1`
    FOREIGN KEY (`csm_sm_name`)
    REFERENCES `garlic`.`sm_socialmedias` (`sm_name`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_sm_socialmedias_has_u_users_u_users1`
    FOREIGN KEY (`csm_u_username`)
    REFERENCES `garlic`.`u_users` (`u_username`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`s_subscriptions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`s_subscriptions` ;

CREATE TABLE IF NOT EXISTS `garlic`.`s_subscriptions` (
  `s_c_clove` INT NOT NULL COMMENT '',
  `s_u_username` VARCHAR(20) NOT NULL COMMENT '',
  PRIMARY KEY (`s_c_clove`, `s_u_username`)  COMMENT '',
  INDEX `fk_c_clove_has_u_users_u_users1_idx` (`s_u_username` ASC)  COMMENT '',
  INDEX `fk_c_clove_has_u_users_c_clove1_idx` (`s_c_clove` ASC)  COMMENT '',
  CONSTRAINT `fk_c_clove_has_u_users_c_clove1`
    FOREIGN KEY (`s_c_clove`)
    REFERENCES `garlic`.`c_clove` (`c_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_c_clove_has_u_users_u_users1`
    FOREIGN KEY (`s_u_username`)
    REFERENCES `garlic`.`u_users` (`u_username`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `garlic`.`ad_admins`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `garlic`.`ad_admins` ;

CREATE TABLE IF NOT EXISTS `garlic`.`ad_admins` (
  `ad_c_clove` INT NOT NULL COMMENT '',
  `ad_u_username` VARCHAR(20) NOT NULL COMMENT '',
  PRIMARY KEY (`ad_c_clove`, `ad_u_username`)  COMMENT '',
  INDEX `fk_u_users_has_c_clove_c_clove1_idx` (`ad_c_clove` ASC)  COMMENT '',
  INDEX `fk_u_users_has_c_clove_u_users1_idx` (`ad_u_username` ASC)  COMMENT '',
  CONSTRAINT `fk_u_users_has_c_clove_u_users1`
    FOREIGN KEY (`ad_u_username`)
    REFERENCES `garlic`.`u_users` (`u_username`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_u_users_has_c_clove_c_clove1`
    FOREIGN KEY (`ad_c_clove`)
    REFERENCES `garlic`.`c_clove` (`c_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;




###############
###############
#### VIEWS ####
###############
###############

# get all votes from articles / comments as well as the total of votes of a user
drop view if exists vUserVotes;
create view vUserVotes as
  select u.u_username as uu_user,
    (
      select count(*)
      from a_articles a inner join (p_posts p inner join v_votes v
                                    on p.p_id = v.v_p_post)
        on a.a_p_id = p.p_id
        where u.u_username like p.p_u_username
     ) as uu_articles_votes,
    (
    select count(*)
    from c_comments c inner join (p_posts p inner join v_votes v
                                    on p.p_id = v.v_p_post)
      on c.c_p_id = p.p_id
      where u.u_username like p.p_u_username
     ) as uu_comments_votes,
    (
     select count(*)
     from v_votes v inner join p_posts p
      on v.v_p_post = p.p_id
      where u.u_username like p.p_u_username
     ) as uu_total_votes
  from u_users u;


drop view if exists vUserRankings;
create view vUserRankings as
  select u.u_username,
  (
   select count(*)
   from p_posts p inner join a_articles a
      on p.p_id = a.a_p_id
    where a.a_r_rank between 1 and 499 and p.p_u_username like u.u_username
   ) as ur_superhot,
  (
   select count(*)
   from p_posts p inner join a_articles a
      on p.p_id = a.a_p_id
    where a.a_r_rank between 500 and 999 and p.p_u_username like u.u_username
   ) as ur_hot,
  (
   select count(*)
   from p_posts p inner join a_articles a
      on p.p_id = a.a_p_id
    where a.a_r_rank between 1000 and 1499 and p.p_u_username like u.u_username
   ) as ur_rising,
  (
   select count(*)
   from p_posts p inner join a_articles a
      on p.p_id = a.a_p_id
    where a.a_r_rank between 1500 and 2000 and p.p_u_username like u.u_username
   ) as ur_upcoming,
  (
   select count(*)
   from p_posts p inner join a_articles a
      on p.p_id = a.a_p_id
    where p.p_u_username like u.u_username
   ) as ur_total
  from u_users u;


# get every post with the user who created it 
# as well as all the votes the post has gotten so far
drop view if exists vPostInfo;
create view vPostInfo as
  select p.p_id as pi_postID, p.p_date as pi_postDate, p.p_content as pi_postContent,
  (
   select u.u_username
   from u_users u
   where u.u_username = p.p_u_username
   ) as pi_user,
  (
   select count(*)
   from v_votes v
   where v.v_p_post = p.p_id
   ) as pi_votes,
   (
    select count(*)
    from c_comments c
    where c.c_p_commentOf = p.p_id
   ) as pi_comments,
   (
    select a.a_title
    from a_articles a
    where a.a_p_id = p.p_id
   ) as pi_postTitle
  from p_posts p
  order by pi_postID asc;


# get the number of subscribers and admins per clove
drop view if exists vCloveInfo;
create view vCloveInfo as
  select c.c_id as ci_cloveID, c.c_name as ci_cloveName,
  (
   select count(*)
   from s_subscriptions s
   where s.s_c_clove = c.c_id
   ) as ci_subscribers,
  (
   select count(*)
   from ad_admins ad
   where ad.ad_c_clove = c.c_id
   ) as ci_admins,
  (
   select count(*)
   from a_articles a
   where a.a_c_clove = c.c_id
   ) as ci_articles
  from c_clove c;